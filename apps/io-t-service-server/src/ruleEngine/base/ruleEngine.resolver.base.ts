/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RuleEngine } from "./RuleEngine";
import { RuleEngineCountArgs } from "./RuleEngineCountArgs";
import { RuleEngineFindManyArgs } from "./RuleEngineFindManyArgs";
import { RuleEngineFindUniqueArgs } from "./RuleEngineFindUniqueArgs";
import { CreateRuleEngineArgs } from "./CreateRuleEngineArgs";
import { UpdateRuleEngineArgs } from "./UpdateRuleEngineArgs";
import { DeleteRuleEngineArgs } from "./DeleteRuleEngineArgs";
import { Device } from "../../device/base/Device";
import { RuleEngineService } from "../ruleEngine.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RuleEngine)
export class RuleEngineResolverBase {
  constructor(
    protected readonly service: RuleEngineService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RuleEngine",
    action: "read",
    possession: "any",
  })
  async _ruleEnginesMeta(
    @graphql.Args() args: RuleEngineCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RuleEngine])
  @nestAccessControl.UseRoles({
    resource: "RuleEngine",
    action: "read",
    possession: "any",
  })
  async ruleEngines(
    @graphql.Args() args: RuleEngineFindManyArgs
  ): Promise<RuleEngine[]> {
    return this.service.ruleEngines(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RuleEngine, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RuleEngine",
    action: "read",
    possession: "own",
  })
  async ruleEngine(
    @graphql.Args() args: RuleEngineFindUniqueArgs
  ): Promise<RuleEngine | null> {
    const result = await this.service.ruleEngine(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RuleEngine)
  @nestAccessControl.UseRoles({
    resource: "RuleEngine",
    action: "create",
    possession: "any",
  })
  async createRuleEngine(
    @graphql.Args() args: CreateRuleEngineArgs
  ): Promise<RuleEngine> {
    return await this.service.createRuleEngine({
      ...args,
      data: {
        ...args.data,

        device: args.data.device
          ? {
              connect: args.data.device,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RuleEngine)
  @nestAccessControl.UseRoles({
    resource: "RuleEngine",
    action: "update",
    possession: "any",
  })
  async updateRuleEngine(
    @graphql.Args() args: UpdateRuleEngineArgs
  ): Promise<RuleEngine | null> {
    try {
      return await this.service.updateRuleEngine({
        ...args,
        data: {
          ...args.data,

          device: args.data.device
            ? {
                connect: args.data.device,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RuleEngine)
  @nestAccessControl.UseRoles({
    resource: "RuleEngine",
    action: "delete",
    possession: "any",
  })
  async deleteRuleEngine(
    @graphql.Args() args: DeleteRuleEngineArgs
  ): Promise<RuleEngine | null> {
    try {
      return await this.service.deleteRuleEngine(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Device, {
    nullable: true,
    name: "device",
  })
  @nestAccessControl.UseRoles({
    resource: "Device",
    action: "read",
    possession: "any",
  })
  async getDevice(
    @graphql.Parent() parent: RuleEngine
  ): Promise<Device | null> {
    const result = await this.service.getDevice(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
