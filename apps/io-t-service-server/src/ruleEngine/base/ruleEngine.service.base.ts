/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RuleEngine as PrismaRuleEngine,
  Device as PrismaDevice,
} from "@prisma/client";

export class RuleEngineServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RuleEngineCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ruleEngine.count(args);
  }

  async ruleEngines(
    args: Prisma.RuleEngineFindManyArgs
  ): Promise<PrismaRuleEngine[]> {
    return this.prisma.ruleEngine.findMany(args);
  }
  async ruleEngine(
    args: Prisma.RuleEngineFindUniqueArgs
  ): Promise<PrismaRuleEngine | null> {
    return this.prisma.ruleEngine.findUnique(args);
  }
  async createRuleEngine(
    args: Prisma.RuleEngineCreateArgs
  ): Promise<PrismaRuleEngine> {
    return this.prisma.ruleEngine.create(args);
  }
  async updateRuleEngine(
    args: Prisma.RuleEngineUpdateArgs
  ): Promise<PrismaRuleEngine> {
    return this.prisma.ruleEngine.update(args);
  }
  async deleteRuleEngine(
    args: Prisma.RuleEngineDeleteArgs
  ): Promise<PrismaRuleEngine> {
    return this.prisma.ruleEngine.delete(args);
  }

  async getDevice(parentId: string): Promise<PrismaDevice | null> {
    return this.prisma.ruleEngine
      .findUnique({
        where: { id: parentId },
      })
      .device();
  }
}
