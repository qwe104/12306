/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DataStream as PrismaDataStream,
  Sensor as PrismaSensor,
} from "@prisma/client";

export class DataStreamServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DataStreamCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dataStream.count(args);
  }

  async dataStreams(
    args: Prisma.DataStreamFindManyArgs
  ): Promise<PrismaDataStream[]> {
    return this.prisma.dataStream.findMany(args);
  }
  async dataStream(
    args: Prisma.DataStreamFindUniqueArgs
  ): Promise<PrismaDataStream | null> {
    return this.prisma.dataStream.findUnique(args);
  }
  async createDataStream(
    args: Prisma.DataStreamCreateArgs
  ): Promise<PrismaDataStream> {
    return this.prisma.dataStream.create(args);
  }
  async updateDataStream(
    args: Prisma.DataStreamUpdateArgs
  ): Promise<PrismaDataStream> {
    return this.prisma.dataStream.update(args);
  }
  async deleteDataStream(
    args: Prisma.DataStreamDeleteArgs
  ): Promise<PrismaDataStream> {
    return this.prisma.dataStream.delete(args);
  }

  async getSensor(parentId: string): Promise<PrismaSensor | null> {
    return this.prisma.dataStream
      .findUnique({
        where: { id: parentId },
      })
      .sensor();
  }
  async StreamData(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
