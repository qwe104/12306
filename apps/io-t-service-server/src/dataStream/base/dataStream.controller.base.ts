/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DataStreamService } from "../dataStream.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DataStreamCreateInput } from "./DataStreamCreateInput";
import { DataStream } from "./DataStream";
import { DataStreamFindManyArgs } from "./DataStreamFindManyArgs";
import { DataStreamWhereUniqueInput } from "./DataStreamWhereUniqueInput";
import { DataStreamUpdateInput } from "./DataStreamUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DataStreamControllerBase {
  constructor(
    protected readonly service: DataStreamService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataStream })
  @nestAccessControl.UseRoles({
    resource: "DataStream",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createDataStream(
    @common.Body() data: DataStreamCreateInput
  ): Promise<DataStream> {
    return await this.service.createDataStream({
      data: {
        ...data,

        sensor: data.sensor
          ? {
              connect: data.sensor,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [DataStream] })
  @ApiNestedQuery(DataStreamFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DataStream",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async dataStreams(@common.Req() request: Request): Promise<DataStream[]> {
    const args = plainToClass(DataStreamFindManyArgs, request.query);
    return this.service.dataStreams({
      ...args,
      select: {
        createdAt: true,
        id: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataStream })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DataStream",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async dataStream(
    @common.Param() params: DataStreamWhereUniqueInput
  ): Promise<DataStream | null> {
    const result = await this.service.dataStream({
      where: params,
      select: {
        createdAt: true,
        id: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataStream })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DataStream",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateDataStream(
    @common.Param() params: DataStreamWhereUniqueInput,
    @common.Body() data: DataStreamUpdateInput
  ): Promise<DataStream | null> {
    try {
      return await this.service.updateDataStream({
        where: params,
        data: {
          ...data,

          sensor: data.sensor
            ? {
                connect: data.sensor,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          sensor: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataStream })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DataStream",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDataStream(
    @common.Param() params: DataStreamWhereUniqueInput
  ): Promise<DataStream | null> {
    try {
      return await this.service.deleteDataStream({
        where: params,
        select: {
          createdAt: true,
          id: true,

          sensor: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/stream-data")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async StreamData(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.StreamData(body);
  }
}
