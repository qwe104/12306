/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DataStream } from "./DataStream";
import { DataStreamCountArgs } from "./DataStreamCountArgs";
import { DataStreamFindManyArgs } from "./DataStreamFindManyArgs";
import { DataStreamFindUniqueArgs } from "./DataStreamFindUniqueArgs";
import { CreateDataStreamArgs } from "./CreateDataStreamArgs";
import { UpdateDataStreamArgs } from "./UpdateDataStreamArgs";
import { DeleteDataStreamArgs } from "./DeleteDataStreamArgs";
import { Sensor } from "../../sensor/base/Sensor";
import { DataStreamService } from "../dataStream.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DataStream)
export class DataStreamResolverBase {
  constructor(
    protected readonly service: DataStreamService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DataStream",
    action: "read",
    possession: "any",
  })
  async _dataStreamsMeta(
    @graphql.Args() args: DataStreamCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DataStream])
  @nestAccessControl.UseRoles({
    resource: "DataStream",
    action: "read",
    possession: "any",
  })
  async dataStreams(
    @graphql.Args() args: DataStreamFindManyArgs
  ): Promise<DataStream[]> {
    return this.service.dataStreams(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DataStream, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DataStream",
    action: "read",
    possession: "own",
  })
  async dataStream(
    @graphql.Args() args: DataStreamFindUniqueArgs
  ): Promise<DataStream | null> {
    const result = await this.service.dataStream(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DataStream)
  @nestAccessControl.UseRoles({
    resource: "DataStream",
    action: "create",
    possession: "any",
  })
  async createDataStream(
    @graphql.Args() args: CreateDataStreamArgs
  ): Promise<DataStream> {
    return await this.service.createDataStream({
      ...args,
      data: {
        ...args.data,

        sensor: args.data.sensor
          ? {
              connect: args.data.sensor,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DataStream)
  @nestAccessControl.UseRoles({
    resource: "DataStream",
    action: "update",
    possession: "any",
  })
  async updateDataStream(
    @graphql.Args() args: UpdateDataStreamArgs
  ): Promise<DataStream | null> {
    try {
      return await this.service.updateDataStream({
        ...args,
        data: {
          ...args.data,

          sensor: args.data.sensor
            ? {
                connect: args.data.sensor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DataStream)
  @nestAccessControl.UseRoles({
    resource: "DataStream",
    action: "delete",
    possession: "any",
  })
  async deleteDataStream(
    @graphql.Args() args: DeleteDataStreamArgs
  ): Promise<DataStream | null> {
    try {
      return await this.service.deleteDataStream(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Sensor, {
    nullable: true,
    name: "sensor",
  })
  @nestAccessControl.UseRoles({
    resource: "Sensor",
    action: "read",
    possession: "any",
  })
  async getSensor(
    @graphql.Parent() parent: DataStream
  ): Promise<Sensor | null> {
    const result = await this.service.getSensor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => String)
  async StreamData(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.StreamData(args);
  }
}
